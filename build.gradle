plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.7.413" apply false
    id "org.jetbrains.kotlin.jvm" version "2.0.20" apply false
}

System.out.println("java version:" + System.getProperty("java.version"))
architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    }
}

def getAppVersion = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    def commitId = stdout.toString().replace("\n", "").replace("\r", "").trim()
    stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'tag', '--points-at', commitId
        standardOutput = stdout
    }
    def tagName = stdout.toString().replace("\n", "").replace("\r", "").trim()
    def versionName = '0-git-' + commitId
    if (tagName != null && "" != tagName) {
        versionName = tagName
    }
    return versionName
} as Object

allprojects {
    //apply plugin: "java"
    var map = new HashMap<String, String>()
    map.put("plugin", "java")
    apply(map)
    map.clear()
    map.put("plugin", "architectury-plugin")
    apply(map)
    map.clear()
    map.put("plugin", "org.jetbrains.kotlin.jvm")
    apply(map)

    archivesBaseName = rootProject.archives_base_name
    version = getAppVersion()

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    java {
        withSourcesJar()
    }
}
